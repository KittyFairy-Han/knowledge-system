(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{333:function(t,s,a){t.exports=a.p+"assets/img/art-gallery-qrcode.24b4ff42.png"},334:function(t,s,a){t.exports=a.p+"assets/img/gc.1ecb4eea.png"},335:function(t,s,a){t.exports=a.p+"assets/img/share.1a3cc019.png"},336:function(t,s,a){t.exports=a.p+"assets/img/zip.96835c55.jpg"},440:function(t,s,a){"use strict";a.r(s);var n=a(14),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[t._v("结合项目中的应用，分享一些用的或了解到的渲染方面的性能优化。")]),t._v(" "),s("h2",{attrs:{id:"项目背景"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#项目背景"}},[t._v("#")]),t._v(" 项目背景")]),t._v(" "),s("p",[t._v("扫码预览： "),s("img",{attrs:{src:a(333),alt:"扫码预览"}})]),t._v(" "),s("ul",[s("li",[s("p",[t._v("场景中的元素就分为两个部分，渲染无真实的 PBR 效果。"),s("br"),t._v("\n① 模型（包括艺术馆建筑和内部装饰等）：blender 导出模型，资源形式是 .gltf+.bin+烘焙图。"),s("br"),t._v("\n② 作品：程序创建的 THREE.Mesh。")])]),t._v(" "),s("li",[s("p",[t._v("功能上很简单，重在展示与浏览，无角色交互等。"),s("br"),t._v("\n① 模型数据是动态的，可能超过 10 层，也可能只有 1、2 层。"),s("br"),t._v("\n② 作品中的图画为用户上传，图片尺寸（像素）体积(字节数)不可控。\n③ 用户交互方面是控制相机运动浏览场景")])]),t._v(" "),s("li",[s("p",[t._v("技术栈 three.js")])])]),t._v(" "),s("h2",{attrs:{id:"分层加载"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#分层加载"}},[t._v("#")]),t._v(" 分层加载")]),t._v(" "),s("p",[t._v("由于数据量不固定，分批加载数据肯定是必要的，在我们的项目中就是分层加载数据。其实这就像列表分页和虚拟滚动列表（virtual-list）一样。这种方案不仅是对渲染的性能优化，也是对加载阶段的优化。"),s("br"),t._v("\n那么怎么样在每批内进行优化，以提高每批的数据量带来更好的用户体验呢？")]),t._v(" "),s("h2",{attrs:{id:"做好-gc"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#做好-gc"}},[t._v("#")]),t._v(" 做好 GC")]),t._v(" "),s("p",[t._v("3d 场景中总会涉及一些删除物体的场景，比如在我们的案例中，作品数据会由于用户上传替换某一个作品也可能整体切换一批作品，这种情况下就涉及删除原有的作品，创建新的作品。如果删除工作不彻底，就会造成内存泄露。"),s("br"),t._v("\n那怎么删除才是真正的释放内存呢？")]),t._v(" "),s("h3",{attrs:{id:"相关-api-介绍"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#相关-api-介绍"}},[t._v("#")]),t._v(" 相关 API 介绍")]),t._v(" "),s("p",[t._v("每个 three.js 实例的创建都会消耗大量的内存因为 three.js 会创建特殊对象如 geometry、material；WebGL 相关的实体如 buffers（缓冲区）或 shader。然而，这些对象不是自动释放的，我们调用特殊的 API 来手动释放这些资源。\n想将 3d 物体从场景中删除/隐藏, 通常有三种方法, visible = false, remove(), dispose().")]),t._v(" "),s("p",[s("img",{attrs:{src:a(334),alt:"gc"}})]),t._v(" "),s("ul",[s("li",[t._v("obj.visible = false ：对象本身所占内存空间并没有改变。对象会被 renderer 遍历到, 但是不参与渲染（因为做了一层 visible=true 的判断）。\n"),s("blockquote",[s("p",[t._v("使用 Raycaster 类来投影时, visible = false 的模型由于还存在于父级的 Object3D 类中, 所以会被投影投到, 这是一个需要注意的点.")])])]),t._v(" "),s("li",[t._v("obj.remove() ： 对象本身所占内存空间并没有改变。在对象父级的 Object3D 中删除了该对象的索引，对象不会被 renderer 遍历到。 不参与渲染。")]),t._v(" "),s("li",[t._v("geometry/material/texture.dispose():就是上面提到的 three 提供的特殊 API，真正的释放内存。")])]),t._v(" "),s("blockquote",[s("p",[t._v("可以通过 WebGLRenderer.info 来获取 webglrender 所占用的资源来检查内存占用情况")])]),t._v(" "),s("h3",{attrs:{id:"应用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#应用"}},[t._v("#")]),t._v(" 应用")]),t._v(" "),s("p",[t._v("在我们的项目中，涉及作品删除操作的都会对作品的材质、纹理、几何体进行 dispose()"),s("br"),t._v("\n以下是一个通用的方法(traverse 会对 obj 的后代元素进行遍历)：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("freeUp")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("obj")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("traverse")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("current")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("geometry"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("material"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" current\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("geometry"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        geometry"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("dispose")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("material"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        material"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("dispose")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        material"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("map"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?.")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("dispose")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        material"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("envMap"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?.")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("dispose")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h2",{attrs:{id:"共享与复用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#共享与复用"}},[t._v("#")]),t._v(" 共享与复用")]),t._v(" "),s("p",[t._v("刚刚提到了每创建一个纹理或材质，都需要开辟一个单独的内存空间。共享与复用就是让相同纹理（材质、几何体）用同一块内存，减少重复创建。")]),t._v(" "),s("h3",{attrs:{id:"图示"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#图示"}},[t._v("#")]),t._v(" 图示")]),t._v(" "),s("p",[s("img",{attrs:{src:a(335),alt:"图示"}})]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" texture1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TextureLoader")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("load")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"test.png"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" material1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MeshBasicMaterial")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("map")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" texture1 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" texture2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TextureLoader")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("load")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"test.png"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" material2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MeshBasicMaterial")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("map")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" texture2 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("像上面这样的代码，虽然 material1 和 material2 “长得一样”但实际上是用了两个独立的内存空间。对应图中左边的结构。"),s("br"),t._v("\n我们要做的就是稍微管理一下纹理、材质，变成右边的结构。")]),t._v(" "),s("h3",{attrs:{id:"应用-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#应用-2"}},[t._v("#")]),t._v(" 应用")]),t._v(" "),s("p",[t._v("比如在我们的项目中，空画框的展示位，画框的大小可能不同，但是纹理和材质是相同的，这种情况下就可以共享材质。所以我们的项目中会有类似这样的代码:")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getEmptyFrameTexture")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("ExhibitHelper"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("EMPTY_NFT_TEXTURE")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      ExhibitHelper"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("EMPTY_NFT_TEXTURE")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TextureLoader")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("load")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("EMPTY_FRAME_URL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" ExhibitHelper"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("EMPTY_NFT_TEXTURE")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("当然，并不是所有的“长得一样”的情况都适用于共享。共享后需要注意的一点是，对于共享材质的 object 3d 来说，只要一个 object 3d 对材质进行了修改，其他的也会同步修改。"),s("br"),t._v("\n在我们的项目中，空相框需要发生改变时（用户上传图片后），整个 object 3d 会销毁，重新创建，所以是不存在改变材质的情况，所以适用于这种优化。还比如，在我们的艺术馆中，每一层都有相同的 logo，如果 logo 是支持后台配置图片，在运行时去创建响应的 object 3d，logo 仅做静态展示，并且总是保持各个楼层的 logo 都保持一致，这种情况下也是很适用于共享材质与纹理甚至是几何体。")]),t._v(" "),s("h2",{attrs:{id:"降低-texture-尺寸"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#降低-texture-尺寸"}},[t._v("#")]),t._v(" 降低 texture 尺寸")]),t._v(" "),s("h3",{attrs:{id:"基础认知"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基础认知"}},[t._v("#")]),t._v(" 基础认知")]),t._v(" "),s("ul",[s("li",[t._v("纹理尺寸越大，在内存中占用的空间越大。一个 1024*1024 的纹理图占用内存是 512*512 的 4 倍。\n"),s("blockquote",[s("p",[t._v("纹理图片压缩后虽然字节数会变少但是在 GPU 使用纹理图的时候仍然是需要解压缩的，解压后又是原图的字节数。所以最直观的是看尺寸。")])])]),t._v(" "),s("li",[t._v("从读取纹理到最终显示在屏幕上，有一个从纹理像素 texel 到屏幕像素 pixel 的映射过程，也就是需要针对纹理的所有像素点进行计算，纹理尺寸最大，运算量也越大。")]),t._v(" "),s("li",[t._v("纹理长宽是 2 的整数次幂，比如 128、256、512，那么在存储时使用内存的效率较高，否则容易产生内存碎片。\n"),s("blockquote",[s("p",[t._v("移动端，WebGL2RenderingContext.MAX_TEXTURE_SIZE = 3397（不知道为什么是这个数，请大佬指教）。")])])])]),t._v(" "),s("p",[t._v("综上，降低纹理尺寸对空间和时间上都有优化作用。")]),t._v(" "),s("h3",{attrs:{id:"应用-3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#应用-3"}},[t._v("#")]),t._v(" 应用")]),t._v(" "),s("p",[t._v("在我们的项目中，关于降低纹理尺寸的优化主要在两方面：对美术输出的模型纹理图做限制、对用户上传的图片做尺寸压缩处理")]),t._v(" "),s("h4",{attrs:{id:"模型纹理图"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#模型纹理图"}},[t._v("#")]),t._v(" 模型纹理图")]),t._v(" "),s("p",[t._v("模型中的纹理尺寸尽量用 512*512，较为复杂的情况（元素较多）用 1024*1024。")]),t._v(" "),s("blockquote",[s("p",[t._v("tips: 512*512 光线烘焙可能会出现锯齿，可以对图片中光线的部分模糊处理一下")])]),t._v(" "),s("h4",{attrs:{id:"用户上传图片的压缩处理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#用户上传图片的压缩处理"}},[t._v("#")]),t._v(" 用户上传图片的压缩处理")]),t._v(" "),s("p",[t._v("由于用户上传的图片尺寸不可控，所以上传后对图片进行处理，原图保留并且生成对尺寸等比缩小后的图片，3d 场景中展示小尺寸图片，全屏查看时展示原图。"),s("br"),t._v("\n缩小后纹理尺寸为 512*512 以内。虽然 2048*2048 理论上是支持的，但是 512 移动端完全够用了。这样可以增加作品展示的数量，也就是说分层加载时，层数可以增加，带来更好的用户体验。"),s("br"),t._v("\n压缩是在后端处理的～ java 代码：")]),t._v(" "),s("p",[s("img",{attrs:{src:a(336),alt:"java code"}})]),t._v(" "),s("h2",{attrs:{id:"降低-material-复杂性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#降低-material-复杂性"}},[t._v("#")]),t._v(" 降低 material 复杂性")]),t._v(" "),s("h3",{attrs:{id:"材质简单说明"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#材质简单说明"}},[t._v("#")]),t._v(" 材质简单说明")]),t._v(" "),s("p",[t._v("three 支持的材质有多种 MeshBasicMaterial、MeshLambertMaterial、MeshPhongMaterial、MeshStandardMaterial 等，"),s("a",{attrs:{href:"https://r105.threejsfundamentals.org/threejs/lessons/threejs-materials.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("各个材质的区别详见"),s("OutboundLink")],1),t._v("。"),s("br"),t._v("\n其中 MeshBasicMaterial 不是 PBR（基于物理渲染的）材质，在呈现的效果上是无法写实的，但性能上是最好的，移动端建议能用 MeshBasicMaterial 就用 MeshBasicMaterial。"),s("br"),t._v("\n性能排序(高到低)：MeshBasicMaterial ➡ MeshLambertMaterial ➡ MeshPhongMaterial ➡ MeshStandardMaterial ➡ MeshPhysicalMaterial。")]),t._v(" "),s("h4",{attrs:{id:"自问自答"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#自问自答"}},[t._v("#")]),t._v(" 自问自答")]),t._v(" "),s("p",[t._v("用 stander 材质，但是实际效果和 basic 一样（不做复杂的金属度粗糙度），性能是不是和 basic 一样？当然不是！还是会有大量的计算。")]),t._v(" "),s("h3",{attrs:{id:"小经验小-tips"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#小经验小-tips"}},[t._v("#")]),t._v(" 小经验小 tips")]),t._v(" "),s("p",[t._v("blender 导出的材质默认是 MeshStandardMaterial（最耗性能的材质），由于美术一直没有找到导出 MeshBasicMaterial 的方法，只好在加载模型时代码层面手动转一下：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// GLTFGroup 是加载成功的回调传给业务层的参数，也就是模型中的根对象")]),t._v("\nGLTFGroup"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("traverse")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("child")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("child"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("material"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" map "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" child"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("material"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("map"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    child"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("material "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("THREE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("MeshBasicMaterial")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 纹理贴图应用上")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("map")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" map"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 以下两个属性是为了保证透明材质的正常渲染")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("transparent")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("alphaTest")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("blockquote",[s("p",[t._v("手动转，对性能是不是有影响？")])]),t._v(" "),s("h2",{attrs:{id:"用-buffer-geometry-代替-geometry"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#用-buffer-geometry-代替-geometry"}},[t._v("#")]),t._v(" 用 buffer geometry 代替 geometry")]),t._v(" "),s("h3",{attrs:{id:"区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#区别"}},[t._v("#")]),t._v(" 区别")]),t._v(" "),s("p",[t._v("BufferGeometry 使用 bufferAttribute 来存储所有的顶点、面、颜色数据，可以直接传输给 GPU，不需要经过 CPU 处理。\nGeometry 使用 Vector3、 Color 等对象存储物体的属性（顶点位置、面、颜色等），需要额外的内存开销，并且需要转换为 bufferGeometry 再传输给 GPU 渲染使用。\n所以，不论是从空间还是时间上，BufferGeometry 的性能是肯定优于 Geometry 的。"),s("br"),t._v("\n当然，Geometry 也有自己的优点那就是易于理解，方便使用。\n如果场景中有复杂的几何体或者非常大量的情况，可以用 BufferGeometry 进行优化。")]),t._v(" "),s("h3",{attrs:{id:"应用-4"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#应用-4"}},[t._v("#")]),t._v(" 应用")]),t._v(" "),s("p",[t._v("在我们的项目中，模型结构比较复杂，所以从模型软件导出时几何体都是用 buffer geometry。（blender 导出 gltf 时默认就是 buffer geometry，也算是比较省心啦）"),s("br"),t._v("\n作品本身只是两个面片叠加，几何体很简单、并且数量也少，所以作品仍然是用 geometry 去创建的。"),s("br"),t._v("\nbuffer geometry 具体怎么用 "),s("a",{attrs:{href:"https://threejs.org/docs/#api/en/core/BufferGeometry",target:"_blank",rel:"noopener noreferrer"}},[t._v("还是看官方文档"),s("OutboundLink")],1),t._v("。这里就用矩形来举例子对比一下 geometry 和 BufferGeometry 写法上的区别。实际上，BufferGeometry 对于初学者来说不好理解，如果有机会学透了再来专门写文章记录 📝 一下 😁。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 宽 w 长 h 的矩形")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 用 geometry")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("PlaneGeometry")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 用 buffer geometry")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createPlanBufferGeo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("w"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("h")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" geometry "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BufferGeometry")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" vertices "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Float32Array")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//三角形1的三个顶点坐标")]),t._v("\n    \t"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("w"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("h"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//↖️")]),t._v("\n    \t w"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("h"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//↘️")]),t._v("\n    \t w"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  h"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//↗️")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//三角形2的三个顶点坐标")]),t._v("\n    \t w"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  h"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//↗️")]),t._v("\n    \t"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("w"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  h"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//↖️")]),t._v("\n    \t"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("w"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("h"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//↙️")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// itemSize = 3 因为每个顶点都是一个三元组。")]),t._v("\n    geometry"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setAttribute")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'position'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BufferAttribute")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" vertices"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" geometry\n\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h2",{attrs:{id:"主动降帧"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#主动降帧"}},[t._v("#")]),t._v(" 主动降帧")]),t._v(" "),s("p",[t._v("当手机电量低，性能差的时候，可以通过主动降帧来节省功耗，在流畅度和持久度上平衡一下。"),s("br"),t._v("\n有些浏览器是能跑多快跑多快，但就我们项目来说超过 60 帧没必要，这种情况下也应用了主动降帧。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 创建一个时钟对象Clock")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" clock "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("THREE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Clock")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//单位秒  间隔多长时间渲染渲染一次（30FPS")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" renderT "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("30")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" timeS "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("animate")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//.getDelta()方法获得两帧的时间间隔")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" clock"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getDelta")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  timeS "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 通过时间判断，降低renderer.render执行频率")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("timeS "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" renderT"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("renderer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("render")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("scene"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("camera"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    timeS "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("requestAnimationFrame")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("animate"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h2",{attrs:{id:"其他"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#其他"}},[t._v("#")]),t._v(" 其他")]),t._v(" "),s("h3",{attrs:{id:"batch"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#batch"}},[t._v("#")]),t._v(" batch")]),t._v(" "),s("p",[t._v("batch，在各种 MVxx 框架（如 Vue、React）中，Batch Update 可以理解为将一段时间内对 model 的修改批量更新到 view 的机制。"),s("br"),t._v("\n在 webGL 中（model->view)的过程为 DrawCall（专业含义：Draw Call 是 CPU 调用图形编程接口，比如 DirectX 或 OpenGL，来命令 GPU 进行渲染的操作）。DrawCall 之前 CPU 要进行大量的工作，DrawCall 了 GPU 就开始渲染。GPU 的渲染能力是很强的，因此渲染速度往往快于 CPU 提交命令的速度。如果 DrawCall 的数量太多，CPU 就会把大量时间花费在提交 DrawCall 命令上，造成 CPU 的过载。而 batch 就是减少 DrawCall 的一种方式，把多次的更改合并到一次渲染。")]),t._v(" "),s("h3",{attrs:{id:"lod"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#lod"}},[t._v("#")]),t._v(" LOD")]),t._v(" "),s("p",[t._v("LOD（Level of Details）技术指的是将场景中的模型按不同精度分为 N 套，按照模型与相机的距离远近，动态切换模型的精度，距离相机较近的模型采用精细模型展示，而距离相机较远的模型使用较为粗糙的模型进行展示。对于大的场景，使用 LOD 技术也是一个有效提升帧率的手段，可以有效减少整个场景中的渲染三角面数。"),s("br"),t._v("\nLOD 其实是基于模型减面从而优化性能这个思路出发的一个具体方案。")]),t._v(" "),s("h3",{attrs:{id:"网格模型合并"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#网格模型合并"}},[t._v("#")]),t._v(" 网格模型合并")]),t._v(" "),s("p",[t._v("纯静态展示的部分可以进行网格模型合并，多个小模型合并为一个大模型。"),s("a",{attrs:{href:"http://threejs.bld.mobi/forum.php?mod=viewthread&tid=170",target:"_blank",rel:"noopener noreferrer"}},[t._v("详见这个例子"),s("OutboundLink")],1),s("br"),t._v("\n因为合并后就是一个对象了，不能单独识别其中的某个原物体，所以如果是动态交互的就不太适用。")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://threejs.org/examples/?q=lod#webgl_lod",target:"_blank",rel:"noopener noreferrer"}},[t._v("three LOD 官方例子"),s("OutboundLink")],1)])])}),[],!1,null,null,null);s.default=e.exports}}]);