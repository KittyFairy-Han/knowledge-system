(window.webpackJsonp=window.webpackJsonp||[]).push([[72],{473:function(a,t,e){"use strict";e.r(t);var s=e(42),r=Object(s.a)({},(function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"web3d"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#web3d"}},[a._v("#")]),a._v(" web3d")]),a._v(" "),e("h2",{attrs:{id:"从最简单的css3切入"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#从最简单的css3切入"}},[a._v("#")]),a._v(" 从最简单的css3切入")]),a._v(" "),e("p",[a._v("眼睛、视口、物体。与css属性perspective、perspective-origin的关系如图\n以屏幕为Z=0的平面，从屏幕的 perspective-origin 位置为出发点，以perspective为长度，向屏幕的正前方做垂线， 垂线的另一端为视点所在位置。视点与屏幕四个顶点分别画射线，形成了一个透视空间，就像我们现实生活中眼睛看到的空间范围。"),e("br"),a._v(" "),e("img",{attrs:{src:"'./static/web3d-1.png'",alt:"关系"}}),e("br"),a._v("\n改变perspective-origin，会产生物体在移动的视觉效果，其实这是因为视点与物体产生了相对运动，物体没有动，但是看起来是动的。当视点向左移动时，物体相对向右运动，视点向右移动，物体反之。垂直方向也是同理的。\n改变perspective，perspective的值越小，离Z平面越近，透视效果更明显。\ntranslateZ代表物体离屏幕的距离，当translateZ越大则说明离屏幕越近，离视点越近，所以物体会逐渐变大。当translateZ>perspective时，说明物体在视点的背后了，这个时候物体会消失，因为已经超出了视野范围。\n"),e("a",{attrs:{href:"https://3dtransforms.desandro.com/perspective",target:"_blank",rel:"noopener noreferrer"}},[a._v("体验"),e("OutboundLink")],1)]),a._v(" "),e("h2",{attrs:{id:"web-3d-四要素"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#web-3d-四要素"}},[a._v("#")]),a._v(" web 3d 四要素")]),a._v(" "),e("p",[a._v("四要素分别是：场景(舞台)、相机、光照、物体(演员)。\n图形学中相机有透视相机会和正交相机两种，对应的投影也有透视投影和正交投影两种。在实际的应用中，已透视投影为主，正交投影的方式一般只应用于3d游戏的一些2d关卡中。\n图形")]),a._v(" "),e("h2",{attrs:{id:"常见库"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#常见库"}},[a._v("#")]),a._v(" 常见库")]),a._v(" "),e("h3",{attrs:{id:"threejs-3d库"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#threejs-3d库"}},[a._v("#")]),a._v(" threeJs 3d库")]),a._v(" "),e("p",[a._v("简单demo：https://www.imooc.com/learn/1267\n深入讲解到three原理、webgl、浏览器等：https://coding.imooc.com/class/chapter/282.html#Anchor\n场景、灯光、摄像机等js创建。html 就用到一个 canvas 标签。\n没有 ar 能力")]),a._v(" "),e("p",[a._v("世界坐标原点是canvas元素中央位置。")]),a._v(" "),e("h3",{attrs:{id:"aframe-3d-ar库"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#aframe-3d-ar库"}},[a._v("#")]),a._v(" aframe 3d+ar库")]),a._v(" "),e("p",[a._v("https://www.imooc.com/learn/1267\n在 three 基础上封装的？\n场景、灯光、摄像机是标签式的写法。\n结合 ar.js 实现AR效果。环境来自摄像头拍摄的真实场景，模型来自代码，它们之间的纽带是一个标记。把标记放到真实场景中，让数字模型与真实场景融合。")]),a._v(" "),e("h3",{attrs:{id:"playcanvas-js"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#playcanvas-js"}},[a._v("#")]),a._v(" playcanvas.js")]),a._v(" "),e("h3",{attrs:{id:"babylon-js"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#babylon-js"}},[a._v("#")]),a._v(" Babylon.js")])])}),[],!1,null,null,null);t.default=r.exports}}]);