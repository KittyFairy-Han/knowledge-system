(window.webpackJsonp=window.webpackJsonp||[]).push([[53],{405:function(t,a,s){"use strict";s.r(a);var e=s(42),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"webpack-工作流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#webpack-工作流程"}},[t._v("#")]),t._v(" webpack 工作流程")]),t._v(" "),s("h2",{attrs:{id:"为什么要打包和构建"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么要打包和构建"}},[t._v("#")]),t._v(" 为什么要打包和构建")]),t._v(" "),s("h4",{attrs:{id:"代码层面"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#代码层面"}},[t._v("#")]),t._v(" 代码层面")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("体积更小：Tree-Shaking,压缩、合并,加载更快")])]),t._v(" "),s("li",[s("p",[t._v("编译高级的语言和语法：TS,ES6+,模块化,less,scss")])]),t._v(" "),s("li",[s("p",[t._v("兼容性和错误检查：Polyfill，postcss，eslint")])])]),t._v(" "),s("h4",{attrs:{id:"流程方面"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#流程方面"}},[t._v("#")]),t._v(" 流程方面")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("统一、高效的开发环境")])]),t._v(" "),s("li",[s("p",[t._v("统一的构建流程和产出标准")])]),t._v(" "),s("li",[s("p",[t._v("集成公司构建规范：提测、上线等")])])]),t._v(" "),s("h2",{attrs:{id:"核心概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#核心概念"}},[t._v("#")]),t._v(" 核心概念")]),t._v(" "),s("h3",{attrs:{id:"module"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#module"}},[t._v("#")]),t._v(" module")]),t._v(" "),s("p",[t._v("模块。Module 是 webpack 的中的核心实体，要加载的一切和所有的依赖都是 Module，一个文件就是一个 module。")]),t._v(" "),s("h3",{attrs:{id:"entry"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#entry"}},[t._v("#")]),t._v(" entry")]),t._v(" "),s("p",[t._v("入口、起点。webpack 会对我们写的代码进行编译、查找依赖，entry 就是编译过程中第一个进行编译的文件。")]),t._v(" "),s("blockquote",[s("p",[t._v("webpack 支持多入口，打包出多个 html 文件。")])]),t._v(" "),s("h3",{attrs:{id:"loader"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#loader"}},[t._v("#")]),t._v(" loader")]),t._v(" "),s("p",[t._v("模块转换器。把浏览器中不能直接运行的代码转换成浏览器中可以直接运行的代码。举几个例子：")]),t._v(" "),s("ul",[s("li",[t._v("babel-loader 通过它把 ES6 转换成 ES5")]),t._v(" "),s("li",[t._v("ts-loader 把 typescript 转换成 JavaScript")]),t._v(" "),s("li",[t._v("less-loader 把 less 转换成 css")]),t._v(" "),s("li",[t._v("css-loader 对 css 样式进行处理")]),t._v(" "),s("li",[t._v("style-loader 把打包的样式插入到 HTML 结构中")])]),t._v(" "),s("h3",{attrs:{id:"plugin"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#plugin"}},[t._v("#")]),t._v(" plugin")]),t._v(" "),s("p",[t._v("webpack 打包构建的流程比作一条生产线，那么插件就像是插入到生产线中的一个功能，在特定的时机对生产线上的资源做处理。\nwebpack 在运行过程中会广播事件，插件只需要监听它所关心的事件，就能加入到这条生产线中，去改变生产线的运作。 webpack 通过 "),s("a",{attrs:{href:"https://juejin.cn/post/6844903588112629767",target:"_blank",rel:"noopener noreferrer"}},[t._v("Tapable"),s("OutboundLink")],1),t._v(" 来组织这条复杂的生产线。 webpack 的事件流机制保证了插件的有序性，使得整个系统扩展性很好。")]),t._v(" "),s("h3",{attrs:{id:"chunk、bundle"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#chunk、bundle"}},[t._v("#")]),t._v(" chunk、bundle")]),t._v(" "),s("p",[t._v("我们直接写出来的是 module，webpack 处理时是 chunk，最后生成浏览器可以直接运行的 bundle。")]),t._v(" "),s("p",[s("img",{attrs:{src:"'./module-chunk-bundle-simple.png'",alt:"与模块的关系"}})]),t._v(" "),s("h4",{attrs:{id:"先回顾一下-module"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#先回顾一下-module"}},[t._v("#")]),t._v(" 先回顾一下 module")]),t._v(" "),s("p",[t._v("当手写下一个一个的文件，它们无论是 ESM 还是 commonJS 或是 AMD，他们都是 module。但是他们并不是浏览器可以直接运行的文件。")]),t._v(" "),s("h4",{attrs:{id:"chunk"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#chunk"}},[t._v("#")]),t._v(" chunk")]),t._v(" "),s("p",[t._v("当 webpack 对 module 源文件进行处理时，webpack 会根据依赖关系生成 chunk 文件。")]),t._v(" "),s("blockquote",[s("p",[t._v("chunk 知识细节见 chunk 章节")])]),t._v(" "),s("h4",{attrs:{id:"bundle"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#bundle"}},[t._v("#")]),t._v(" bundle")]),t._v(" "),s("p",[t._v("当 webpack 对 chunk 文件处理后，最后输出的就是 bundle 文件。 bundle 文件才可以直接在浏览器中运行。")]),t._v(" "),s("h4",{attrs:{id:"其实-module-chunk-和-bundle-其实就是同一份逻辑代码在不同转换场景下的取了三个名字。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#其实-module-chunk-和-bundle-其实就是同一份逻辑代码在不同转换场景下的取了三个名字。"}},[t._v("#")]),t._v(" 其实，module，chunk 和 bundle 其实就是同一份逻辑代码在不同转换场景下的取了三个名字。")]),t._v(" "),s("h4",{attrs:{id:"用一个例子表现-module-chunk-和-bundle"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#用一个例子表现-module-chunk-和-bundle"}},[t._v("#")]),t._v(" 用一个例子表现 module，chunk 和 bundle")]),t._v(" "),s("ul",[s("li",[t._v("目录结构")])]),t._v(" "),s("div",{staticClass:"language-code extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("  src\n  ├── index.css\n  ├── index.html # 这个是 HTML 模板代码\n  ├── index.js\n  ├── common.js\n  └── utils.js\n")])])]),s("ul",[s("li",[t._v("文件内容")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// mian.js")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"./example.js"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"./index.css"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// example.js")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a module file for example"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// util.js")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("square")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("a")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("div",{staticClass:"language-css extra-class"},[s("pre",{pre:!0,attrs:{class:"language-css"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* index.css */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token selector"}},[t._v("body")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("background-color")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" green"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("ul",[s("li",[t._v("webpack 配置")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("moudle"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("exports"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    entry"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        index"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"../src/main.js"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        utils"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'../src/utils.js'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    output"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        filename"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"[name].bundle.js"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 两个 bundle 文件名与两个 entry 对应")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    module"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        rules"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                test"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("\\.css$")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                use"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n                    MiniCssExtractPlugin"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("loader"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// MiniCssExtractPlugin 创建一个 link 标签")]),t._v("\n                    "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'css-loader'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// css-loader 负责解析 CSS 代码, 处理 CSS 中的依赖")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    plugins"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MiniCssExtractPlugin")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// MiniCssExtractPlugin 抽离出 css 文件，以 link 标签的形式引入样式文件")]),t._v("\n            filename"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'index.bundle.css'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 输出的 css 文件名为 index.bundle.css")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[s("img",{attrs:{src:"'./module-chunk-bundle.png'",alt:"用图表示"}})]),t._v(" "),s("h2",{attrs:{id:"主线流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#主线流程"}},[t._v("#")]),t._v(" 主线流程")]),t._v(" "),s("p",[s("img",{attrs:{src:"'./webpack%E6%80%BB%E6%B5%81%E7%A8%8B.jpg",alt:"webpack 总流程"}}),t._v(" "),s("br"),t._v("\nwebpack 就像一条生产线，要经过一系列处理流程后才能将源文件转换成输出结果。 这条生产线上的每个处理流程的职责都是单一的，多个流程之间有存在依赖关系，只有完成当前处理后才能交给下一个流程去处理。\n"),s("br"),t._v("\nwebpack 源码非常复杂，想完全看明白源码太困难，对于应用它的人来说，只要看懂主线剧情就可以了。主线剧情就是从配置文件读取 entry 开始，到最后输出 bundle.js 的过程。在 webpack 内部逻辑中就是 compilation.addEntry 方法开始。")]),t._v(" "),s("h4",{attrs:{id:"解开哪些疑问"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#解开哪些疑问"}},[t._v("#")]),t._v(" 解开哪些疑问？")]),t._v(" "),s("ul",[s("li",[t._v("webpack 编译我们的源码过程中具体多做了写什么？")]),t._v(" "),s("li",[t._v("loaders 在哪个过程起作用的？")]),t._v(" "),s("li",[t._v("依赖树是怎么形成的？")]),t._v(" "),s("li",[t._v("最后形成的 bundle 是怎么划分的？")])]),t._v(" "),s("h4",{attrs:{id:"编译中的重要概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#编译中的重要概念"}},[t._v("#")]),t._v(" 编译中的重要概念")]),t._v(" "),s("ul",[s("li",[t._v("compiler\ncompiler 可以理解为 webpack 编译的调度中心，是一个编译器实例，在 compiler 对象记录了完整的 webpack 环境信息，在 webpack 的每个进程中，compiler 只会生成一次。")]),t._v(" "),s("li",[t._v("Compilation\ncompiler 的生命周期内一个核心对象，它包含了一次构建过程中所有的数据(modules、chunks、assets)。也就是说一次构建过程对应一个 Compilation 实例。")]),t._v(" "),s("li",[t._v("compiler 几个重要的钩子：")]),t._v(" "),s("li",[s("ul",[s("li",[t._v("make 在钩子的回调中有 compilaiion.addEntry 方法")])])]),t._v(" "),s("li",[s("ul",[s("li",[t._v("emit 在钩子的回调中执行生成文件的逻辑")])])]),t._v(" "),s("li",[s("ul",[s("li",[t._v("done 文件已写入文件系统后触发")])])])]),t._v(" "),s("h3",{attrs:{id:"_1-准备工作阶段"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-准备工作阶段"}},[t._v("#")]),t._v(" 1.准备工作阶段")]),t._v(" "),s("ol",[s("li",[t._v("webpack 启动入口，我们对 webpack 的配置会传入这个入口。")]),t._v(" "),s("li",[t._v("用上一步得到的参数初始化 Compiler 对象，注册内置插件和配置文件中的插件。")]),t._v(" "),s("li",[t._v("初始化 compiler 后，启动 compiler.run 来构建文件，代表着要开始编译了。")]),t._v(" "),s("li",[t._v("compiler.compile 开始真正执行我们的构建流程。在这个阶段，Compiler 对象会开始实例化两个核心的工厂对象，分别是 NormalModuleFactory 和 ContextModuleFactory。工厂对象后续用来对应创建 NormalModule 和 ContextModule 实例。")]),t._v(" "),s("li",[t._v("创建此次编译的 Compilation 对象，在创建 Compilation 实例时会触发钩子 compilaiion 和 thisCompilation。")]),t._v(" "),s("li",[t._v("创建完 Compilation 实例后，webpack 的准备阶段已经完成，下一步将开始 modules 的生成阶段。")])]),t._v(" "),s("h3",{attrs:{id:"_2-modules-的生成阶段"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-modules-的生成阶段"}},[t._v("#")]),t._v(" 2.modules 的生成阶段")]),t._v(" "),s("ul",[s("li",[t._v("概括：根据配置中的 entry 找出所有的入口文件，从 entry 开始，使用到 loader 先完成模块转换，形成 AST，然后遍历 AST 把所有 require 找出来形成 依赖树。递归遍历依赖树节点对应的文件，每个文件都经历上述 loader-AST-module 这个过程，直到递归结束。")])]),t._v(" "),s("ol",[s("li",[t._v("this.hooks.make.callAsync()：执行订阅了 make 钩子的插件的回调函数。make 在钩子的回调中有调用 compilaiion.addEntry 的逻辑。")]),t._v(" "),s("li",[t._v("compilation.addEntry： addEntry 方法会触发第一批 module 的解析，即我们在 entry 中配置的入口文件。addEntry 主要执行_addModuleChain()")]),t._v(" "),s("li",[t._v("_addModuleChain：使用对应的工厂函数 NormalModuleFactory.create 方法生成一个空的 module 对象，回调中会把此 module 存入 compilation.modules 对象和 dependencies.module 对象中，由于是入口文件，也会存入 compilation.entries 中。随后执行 buildModule 进入真正的构建 module 内容的过程")]),t._v(" "),s("li",[t._v("buildModule： buildModule 中调用了 doBuild，doBuild 调用了相应的 loaders ，把我们的模块转成标准的 JS 模块。")]),t._v(" "),s("li",[t._v("Parser.parse：经过 doBuild 之后，我们的任何模块都被转成了标准的 JS 模块。接下来就是调用 Parser.parse 方法，将 JS 解析为 AST。")]),t._v(" "),s("li",[t._v("遍历 AST 找到所有依赖，得到 dependencies 数组。再依次对其他文件进行 2->-3->4 的过程直到遍历结束。具体的递归思路是：每个 module 解析完成之后，都会触发 Compilation 例对象的 succeedModule 钩子，订阅这个钩子获取到刚解析完的 module 对象。随后，webpack 会遍历 module.dependencies 数组，递归解析它的依赖模块生成 module。")]),t._v(" "),s("li",[t._v("make 阶段到此结束，接下去会触发 compilation.seal 方法，进入下一个阶段。")])]),t._v(" "),s("h3",{attrs:{id:"_3-chunks-生成阶段"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-chunks-生成阶段"}},[t._v("#")]),t._v(" 3.chunks 生成阶段")]),t._v(" "),s("ul",[s("li",[t._v("总述：compilation.seal 方法主要生成 chunks，对 chunks 进行一系列的优化操作，并生成要输出的代码。")])]),t._v(" "),s("ol",[s("li",[t._v("compilation.seal： 从 entry 中的 module 开始，生成一个新的 chunk 包含 entry 中的所有 module。")]),t._v(" "),s("li",[t._v("遍历 module.dependencies，将其依赖的模块也加入到上一步生成的 chunk 中。若某个 module 是动态引入的，为其创建一个新的 chunk，接着遍历依赖。(比如 import() 函数就会创建一个新的 chunk)\n"),s("blockquote",[s("p",[t._v("在生成 chunk 的过程中与过程后，webpack 会对 chunk 和 module 进行一系列的优化操作，优化操作大都是由不同的插件去完成。")])])]),t._v(" "),s("li",[t._v("compilation.createChunkAssets： 生成 chunk 后，compilation.seal 中调用 compilation.createChunkAssets 方法，遍历 chunks，来渲染每一个 chunk 生成代码。其实，compilation 对象在实例化时，同时还会实例化三个对象，分别是 MainTemplate, ChunkTemplate 和 ModuleTemplate。这三个对象是用来渲染 chunk，得到最终代码模板的。")]),t._v(" "),s("li",[t._v("emitAsset：每个 chunk 的源码生成之后，会调用 emitAsset 将其存在 compilation.assets 中。当所有的 chunk 都渲染完成之后，assets 就是最终更要生成的文件列表。")]),t._v(" "),s("li",[t._v("至此，compilation 的 seal 方法结束，也代表着 compilation 实例的所有工作到此也全部结束，接下来触发 compiler 的 emit 钩子。")])]),t._v(" "),s("h3",{attrs:{id:"_4-生成文件阶段"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-生成文件阶段"}},[t._v("#")]),t._v(" 4.生成文件阶段")]),t._v(" "),s("p",[t._v("compiler emit 钩子触发，这是我们修改最终文件的最后一个机会，在此之后，我们的文件就不能改动了。webpack 会直接遍历 compilation.assets 生成所有文件，然后触发钩子 done，结束构建流程。")])])}),[],!1,null,null,null);a.default=n.exports}}]);